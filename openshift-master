( yum install -y docker git epel-release NetworkManager
yum install -y python-pip
pip install ansible
systemctl enable docker NetworkManager
systemctl start docker NetworkManager
cd /root
htpasswd='$apr1$zTCG/myL$mj1ZMOSkYg7a9NLZK9Tk9.'
ip=$(curl http://ipinfo.io/ip)
cat <<EOF >/root/inventory
[OSEv3:children]
masters
etcd
nodes
[OSEv3:vars]
ansible_ssh_user=root
ansible_sudo=false
ansible_become=false
deployment_type=origin
os_sdn_network_plugin_name='redhat/openshift-ovs-multitenant'
openshift_install_examples=true
openshift_docker_options='--insecure-registry 172.30.0.0/16'
openshift_docker_selinux_enabled=false
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider'}]
openshift_master_htpasswd_users={'admin' : '$htpasswd'}
openshift_master_default_subdomain=apps.$ip
openshift_master_cluster_public_hostname=$ip
openshift_master_cluster_hostname=master-$c
openshift_web_console_install=false
openshift_disable_check=disk_availability,docker_storage,memory_availability
openshift_hosted_router_selector='node-role.kubernetes.io/infra=true'
openshift_enable_service_catalog=false
openshift_web_console_install=false
[masters]
master-$c
[etcd]
master-$c
[nodes]
master-$c openshift_node_group_name='node-config-master-infra' openshift_schedulable=true
EOF
for n in $(seq 1 $nodes); do
  echo "node-$c-$n openshift_node_group_name='node-config-compute'" >>/root/inventory
done
git clone https://github.com/openshift/openshift-ansible
cd openshift-ansible
git checkout release-3.11
ansible-playbook playbooks/prerequisites.yml -i /root/inventory
ansible-playbook playbooks/deploy_cluster.yml -i /root/inventory
if [ $training = false ]; then
  k8s_version=$(kubectl version --short | awk -Fv '/Server Version: / {print $3}')
  url="https://install.portworx.com/$(cut -f 1,2 -d . <<<$version)?kbver=$k8s_version&b=true&c=$cluster_name-$c&stork=true&st=k8s&lh=true"
  if [ $journal = true ]; then
    while : ; do
      journal_dev=$(ssh -oConnectTimeout=1 -oStrictHostKeyChecking=no node-$c-1 lsblk | grep 3G | tail -f | cut -f 1 -d " ")
      [ $? -eq 0 ] && break
      sleep 5
    done
    url="$url&j=/dev/$journal_dev"
  fi
  curl -so /tmp/px.yml $url
  [ "$version" ] && sed -ri s/oci-monitor:[0-9\.]+/oci-monitor:$version/ /tmp/px.yml
  kubectl apply -f /tmp/px.yml
  while : ; do
    STORK_POD=$(kubectl get pods -n kube-system -l name=stork -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
    if [ "$STORK_POD" ]; then
      kubectl cp -n kube-system $STORK_POD:/storkctl/linux/storkctl /usr/bin/storkctl 2>/dev/null
      chmod +x /usr/bin/storkctl
      [ $? -eq 0 ] && break
    fi
    sleep 5
    echo waiting for stork
  done
  if [ $c != 1 ]; then
    while : ; do
      token=$(ssh -oConnectTimeout=1 -oStrictHostKeyChecking=no node-$c-1 pxctl cluster token show 2>/dev/null | cut -f 3 -d " ")
      echo $token | grep -Eq '\w{128}'
      [ $? -eq 0 ] && break
      sleep 5
      echo waiting for portworx
    done
    storkctl generate clusterpair -n default remotecluster-$c | sed "/insert_storage_options_here/c\    ip: node-$c-1\n    token: $token" >/root/cp.yaml
    while : ; do
      cat /root/cp.yaml | ssh -oConnectTimeout=1 -oStrictHostKeyChecking=no master-1 kubectl apply -f -
      [ $? -eq 0 ] && break
      sleep 5
    done
  fi
fi
echo End) >&/var/log/vagrant.bootstrap &
